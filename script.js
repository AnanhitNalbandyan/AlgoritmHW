/*

Задание 1.
Написать функцию, которой на вход подаётся два упорядоченных массива
a = 1 3 5 7 9
b = 4 10


НУЖНО составить новый упорядоченный массив из двух пришедших
c = 1 3 4 5 7 9 10


i  v
a  1 3 5 7 9
b  4 10

j  ^


заготовка функции
function name(arr1, arr2) {
    let c = Array(arr1.length + arr2.length);
    sort использовать нельзя
    return c;
} */

//!
function Arrays(array1, array2) {
        let i = 0;
        let j = 0;
        const c = [];
    
        while (i < array1.length && j < array2.length) {
        if (array1[i] < array2[j]) {
            c.push(array1[i]);
            i++;
        } else {
            c.push(array2[j]);
            j++;
        }
        }
    
        while (i < array1.length) {
        c.push(array1[i]);
        i++;
        }
    
        while (j < array2.length) {
        c.push(array2[j]);
        j++;
        }
    
        return c;
    }
    
    const a = [1, 3, 5, 7, 9];
    const b = [4, 10];
    const c = Arrays(a, b);
    console.log(c); // Output: [1, 3, 4, 5, 7, 9, 10]


    //? 1.Сколько "указателей" нужно для начала сортировки?
    //? 2. На что они указывают?

   //! нужны 2 указателя один указывает на левый и другой - правый конец  соответственно той часть массива 
    //! где в настоящее время переставляются упорядоченные элементы
    

    //? 3.Что такое опорный(pivot) элемент?
    //? 4.* Как будет выглядеть массив [7 -2 4 1 6 5 0 -4 2] после первой итерации?
   //! Первая итерация алгоритма быстрой сортировки состоит в выборе опорного элемента (pivot) 
    //!и разбиении массива на две части: левую, содержащую элементы меньше опорного,
    //! и правую, содержащую элементы больше опорного.
   //! В результате первой итерации, массив будет разбит на две части: 
   //!левая часть будет содержать элементы [-2, 4, 1, 6, 5, 0, -4, 2],
   //! а правая часть будет содержать элементы, большие чем опорный [7].

    //? 5. ** Какая худшая и лучшая оценка сложности алгоритма?

    //! худшая оценка сложности O(n);
    //! лучшая оценка сложности O(logn);
